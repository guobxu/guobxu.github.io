<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-02-21T15:27:02+08:00</updated><id>/feed.xml</id><title type="html">codetalk</title><entry><title type="html">又开始写博客了</title><link href="/2019/02/20/blog-again.html" rel="alternate" type="text/html" title="又开始写博客了" /><published>2019-02-20T00:00:00+08:00</published><updated>2019-02-20T00:00:00+08:00</updated><id>/2019/02/20/blog-again</id><content type="html" xml:base="/2019/02/20/blog-again.html">&lt;p&gt;写在前面&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最开始写博客在好几年前了，那时候还注册了一个learn-0101.com的域名，使用WP搭建的站点，写一写关于技术的文章，后来发觉写来写去都是一些陈词滥调、拷贝粘贴，加上自己毅力不足就停止了。&lt;/p&gt;

  &lt;p&gt;17年初的时候呆在家里，想着要往iOS设计开发的方向转型，于是有了现在这个基于Github Pages的博客，但后来证明只是一时的想法而已，转型没有去实施，博客也停止写了。&lt;/p&gt;

  &lt;p&gt;最近忙于「codetalk」站点的开发，遇到了许多以前不曾遇到的问题，解决问题欣喜之余想到是否应该把自己遇到的这些问题、以及解决问题的方案或者思路分享出来，也算是一种回馈吧。&lt;/p&gt;

  &lt;p&gt;于是这个博客又活了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;追求更好的代码&quot;&gt;追求更好的代码&lt;/h2&gt;

&lt;p&gt;更确切的说，在追求更好的代码之前应该确保系统设计是良好的，好的设计下代码才有存在的意义，因此这里的‘更好’也包含系统设计方面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;每个人都应该致力于追求更好的代码，并让它成为一种习惯。&lt;/strong&gt;为什么会有这种想法呢？项目或者迭代的时间通常都很紧凑，不可能将每一段代码像艺术品那样精雕细琢，但至少需要保证在实现功能的同时没有明显的漏洞，比如代码错误、资源泄漏等。写出高质量的代码，需要付出更多的思考同时也是对自己技巧的打磨；同时也是对团队、项目负责的表现。&lt;/p&gt;

&lt;h3 id=&quot;现状&quot;&gt;现状&lt;/h3&gt;

&lt;p&gt;作为一个工作十年有余，经历过多家公司的IT职场老司机，对于业内整体的代码质量还是持比较悲观态度的，并且这种趋势还处在一个下滑的态势。在代码审查过程中经常可以发现类似下面的低级错误：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1. IO资源未关闭&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FileInputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. 性能低下&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;类似这样的错误发生在刚毕业的新手身上可以理解，但是对于工作4、5年的程序员犯这种错误也不少见。&lt;/p&gt;

&lt;h3 id=&quot;原因和解决方法&quot;&gt;原因和解决方法&lt;/h3&gt;

&lt;p&gt;原因有两方面：公司和个人。首先分析公司方面的原因，大部分公司是项目或者产品驱动的，从高层到中层管理关注的是产品的进度以及最终的成败，对于技术细节不了解或者无心关注。这就导致技术管理者以及开发人员仅专注于具体功能的实现，而忽略功能之外一些东西如代码质量、性能等。这样带来的恶果是显而易见的，就是系统后期维护、扩展的成本急剧上升，甚至是根本无法维护。&lt;strong&gt;应该在整个公司层面形成高代码质量的文化，加入某些机制如代码规范、审查、奖惩机制等，并且在系统的设计和研发阶段加大对代码质量的关注&lt;/strong&gt;，这样虽然短期内会导致一定的成本提升，但长期来看肯定是可以带来很大收益的。&lt;/p&gt;

&lt;p&gt;另一方面是个人，这也是我认为的主要原因。&lt;strong&gt;个人是否有意愿让自己成长为一个更好的开发者，决定了是否有动力去写出高质量的代码&lt;/strong&gt;。所谓你永远无法叫醒一个装睡的人，如果仅仅把写代码作为一份领薪水的职业是没有动力去让自己变得更优秀的。个人而言首先应该把高质量的代码作为一个基本要求，养成更严密的思维习惯，同时勤于对已有代码进行重构。另外不断对经历的项目进行经验总结，尤其是那些踩过的坑。&lt;/p&gt;

&lt;h3 id=&quot;这个博客能带来什么&quot;&gt;这个博客能带来什么？&lt;/h3&gt;

&lt;p&gt;无法保证博客中的每一行代码都是高质量的，甚至是没有bug的，但我想带来的是这样一种态度，追求高质量代码的态度。希望各位读者也能认同并践行这样一种态度，那这个博客的目的也就达到一半了。&lt;/p&gt;

&lt;h2 id=&quot;基于示例项目的迭代式开发&quot;&gt;基于示例项目的迭代式开发&lt;/h2&gt;

&lt;p&gt;前面提到之前也写过博客但后来没有坚持下来，其中一个主要原因就是比较零散而缺乏目的性，很多时候只是为了写而写，实际上是一些其他博客上的陈词滥调，意义不大。而之所以再次开启这个博客，主要原因是找到了一个认为适合自己的方法，就是通过「&lt;strong&gt;基于示例项目迭代开发&lt;/strong&gt;」的模式。&lt;/p&gt;

&lt;p&gt;所谓「基于示例项目迭代式开发」的核心在于两点：示例项目 和 迭代。示例项目可以是我之前工作经历过的项目，也可以参照目前业内比较流行的产品；迭代指的是敏捷开发中的迭代(sprint)。示例项目包含最初的MVP(最小产品)需求，以及后续各个迭代中的新增需求以及功能优化。而文章则是围绕系统的整体架构、数据库/API设计、功能需求的编码实现展开，这样就做到了有的放矢，读者也可以跟随着文章经历整个项目的敏捷迭代周期到最终的交付。&lt;/p&gt;

&lt;p&gt;需要申明的是，系统的设计以及核心代码等在文章中会有展示，但完整的文档以及代码将会以「&lt;strong&gt;个人作品&lt;/strong&gt;」的形式单独收录。&lt;/p&gt;

&lt;p&gt;希望通过以上的方式，能够将分享坚持下去，同时也希望与各位读者多多交流。&lt;/p&gt;

&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;

&lt;p&gt;新的一年新的开始，想起离开校园十余载不禁感慨时光易逝，希望自己在新的一年珍惜好时光，加倍努力达成预想的目标。同时也祝大家心想事成，万事如意！&lt;/p&gt;</content><author><name></name></author><summary type="html">写在前面</summary></entry></feed>